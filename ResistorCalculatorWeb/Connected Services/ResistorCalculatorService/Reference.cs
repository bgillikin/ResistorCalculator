//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ResistorCalculatorWeb.ResistorCalculatorService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BandDetail", Namespace="http://schemas.datacontract.org/2004/07/Core.Model")]
    [System.SerializableAttribute()]
    public partial class BandDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> MulitplierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SignificantFiguresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> ToleranceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Mulitplier {
            get {
                return this.MulitplierField;
            }
            set {
                if ((this.MulitplierField.Equals(value) != true)) {
                    this.MulitplierField = value;
                    this.RaisePropertyChanged("Mulitplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SignificantFigures {
            get {
                return this.SignificantFiguresField;
            }
            set {
                if ((this.SignificantFiguresField.Equals(value) != true)) {
                    this.SignificantFiguresField = value;
                    this.RaisePropertyChanged("SignificantFigures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Tolerance {
            get {
                return this.ToleranceField;
            }
            set {
                if ((this.ToleranceField.Equals(value) != true)) {
                    this.ToleranceField = value;
                    this.RaisePropertyChanged("Tolerance");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntryDetail", Namespace="http://schemas.datacontract.org/2004/07/Core.Model")]
    [System.SerializableAttribute()]
    public partial class EntryDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BandColor1IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BandColor2IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BandColor3IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BandColor4IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResistanceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BandColor1ID {
            get {
                return this.BandColor1IDField;
            }
            set {
                if ((this.BandColor1IDField.Equals(value) != true)) {
                    this.BandColor1IDField = value;
                    this.RaisePropertyChanged("BandColor1ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BandColor2ID {
            get {
                return this.BandColor2IDField;
            }
            set {
                if ((this.BandColor2IDField.Equals(value) != true)) {
                    this.BandColor2IDField = value;
                    this.RaisePropertyChanged("BandColor2ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BandColor3ID {
            get {
                return this.BandColor3IDField;
            }
            set {
                if ((this.BandColor3IDField.Equals(value) != true)) {
                    this.BandColor3IDField = value;
                    this.RaisePropertyChanged("BandColor3ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BandColor4ID {
            get {
                return this.BandColor4IDField;
            }
            set {
                if ((this.BandColor4IDField.Equals(value) != true)) {
                    this.BandColor4IDField = value;
                    this.RaisePropertyChanged("BandColor4ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Resistance {
            get {
                return this.ResistanceField;
            }
            set {
                if ((object.ReferenceEquals(this.ResistanceField, value) != true)) {
                    this.ResistanceField = value;
                    this.RaisePropertyChanged("Resistance");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ResistorCalculatorService.IResistorCalculatorService")]
    public interface IResistorCalculatorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResistorCalculatorService/GetBandList", ReplyAction="http://tempuri.org/IResistorCalculatorService/GetBandListResponse")]
        System.Collections.Generic.Dictionary<int, ResistorCalculatorWeb.ResistorCalculatorService.BandDetail> GetBandList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResistorCalculatorService/GetBandList", ReplyAction="http://tempuri.org/IResistorCalculatorService/GetBandListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, ResistorCalculatorWeb.ResistorCalculatorService.BandDetail>> GetBandListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResistorCalculatorService/GetEntryList", ReplyAction="http://tempuri.org/IResistorCalculatorService/GetEntryListResponse")]
        System.Collections.Generic.Dictionary<int, ResistorCalculatorWeb.ResistorCalculatorService.EntryDetail> GetEntryList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResistorCalculatorService/GetEntryList", ReplyAction="http://tempuri.org/IResistorCalculatorService/GetEntryListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, ResistorCalculatorWeb.ResistorCalculatorService.EntryDetail>> GetEntryListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResistorCalculatorService/SaveEntryList", ReplyAction="http://tempuri.org/IResistorCalculatorService/SaveEntryListResponse")]
        bool SaveEntryList(ResistorCalculatorWeb.ResistorCalculatorService.EntryDetail[] entryList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResistorCalculatorService/SaveEntryList", ReplyAction="http://tempuri.org/IResistorCalculatorService/SaveEntryListResponse")]
        System.Threading.Tasks.Task<bool> SaveEntryListAsync(ResistorCalculatorWeb.ResistorCalculatorService.EntryDetail[] entryList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResistorCalculatorService/CalculateResistance", ReplyAction="http://tempuri.org/IResistorCalculatorService/CalculateResistanceResponse")]
        string CalculateResistance(string first, string second, double multiplier, double tolerance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResistorCalculatorService/CalculateResistance", ReplyAction="http://tempuri.org/IResistorCalculatorService/CalculateResistanceResponse")]
        System.Threading.Tasks.Task<string> CalculateResistanceAsync(string first, string second, double multiplier, double tolerance);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IResistorCalculatorServiceChannel : ResistorCalculatorWeb.ResistorCalculatorService.IResistorCalculatorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResistorCalculatorServiceClient : System.ServiceModel.ClientBase<ResistorCalculatorWeb.ResistorCalculatorService.IResistorCalculatorService>, ResistorCalculatorWeb.ResistorCalculatorService.IResistorCalculatorService {
        
        public ResistorCalculatorServiceClient() {
        }
        
        public ResistorCalculatorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ResistorCalculatorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ResistorCalculatorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ResistorCalculatorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.Dictionary<int, ResistorCalculatorWeb.ResistorCalculatorService.BandDetail> GetBandList() {
            return base.Channel.GetBandList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, ResistorCalculatorWeb.ResistorCalculatorService.BandDetail>> GetBandListAsync() {
            return base.Channel.GetBandListAsync();
        }
        
        public System.Collections.Generic.Dictionary<int, ResistorCalculatorWeb.ResistorCalculatorService.EntryDetail> GetEntryList() {
            return base.Channel.GetEntryList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, ResistorCalculatorWeb.ResistorCalculatorService.EntryDetail>> GetEntryListAsync() {
            return base.Channel.GetEntryListAsync();
        }
        
        public bool SaveEntryList(ResistorCalculatorWeb.ResistorCalculatorService.EntryDetail[] entryList) {
            return base.Channel.SaveEntryList(entryList);
        }
        
        public System.Threading.Tasks.Task<bool> SaveEntryListAsync(ResistorCalculatorWeb.ResistorCalculatorService.EntryDetail[] entryList) {
            return base.Channel.SaveEntryListAsync(entryList);
        }
        
        public string CalculateResistance(string first, string second, double multiplier, double tolerance) {
            return base.Channel.CalculateResistance(first, second, multiplier, tolerance);
        }
        
        public System.Threading.Tasks.Task<string> CalculateResistanceAsync(string first, string second, double multiplier, double tolerance) {
            return base.Channel.CalculateResistanceAsync(first, second, multiplier, tolerance);
        }
    }
}
